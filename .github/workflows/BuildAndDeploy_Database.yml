name: Build and Deploy Database

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
    types: [closed]

permissions:
  contents: read

jobs:
  build-deploy:
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'Database' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: docker
    env:
      REGISTRY: docker.io
      IMAGE_NAME: steelduck1/RMW-Database 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        working-directory: RMW-Database
        run: pip install -r requirements.txt

      # Add tests when they become available
      # - name: Run tests
      #   working-directory: RMW-Database
      #   run: pytest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: RMW-Database
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trigger Redeploy
        id: trigger_redeploy
        env:
          DEPLOY_API_KEY: ${{ secrets.DEPLOY_API_KEY }}
        run: |
          echo "Triggering redeploy..."
          REDEPLOY_URL="http://188.166.89.152:8080/redeploy?api_key=${DEPLOY_API_KEY}&service=database"
          redeploy_response=$(curl -s -X POST "$REDEPLOY_URL")
          echo "Redeploy response:"
          echo "$redeploy_response"
          if echo "$redeploy_response" | grep -q "Redeployment triggered"; then
            echo "Redeployment triggered detected."
            echo "::set-output name=status::complete"
          else
            echo "Redeployment trigger message not detected."
            echo "::set-output name=status::incomplete"
          fi

      - name: Wait for Redeployment Completion
        run: |
          if [ "${{ steps.trigger_redeploy.outputs.status }}" = "complete" ]; then
            echo "Redeployment complete based on trigger message."
          else
            echo "Redeployment not complete. Exiting." && exit 1
          fi 